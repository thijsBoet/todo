{"version":3,"sources":["Components/Clock.js","Components/layout/Header.js","Components/AddTodo.js","Components/TodoItem.js","Components/Todos.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleTimeString","React","Component","Header","AddTodo","title","onChange","e","target","value","onSubmit","preventDefault","addTodo","style","display","type","name","placeholder","flex","padding","className","TodoItem","getStyle","backgroundColor","borderBottom","textDecoration","todo","completed","markComplete","console","log","id","bind","onClick","delTodo","btnStyle","color","border","borderRadius","cursor","float","Todos","todos","map","key","App","uuidv4","filter","newTodo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af1af3a5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      date : new Date()\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval (\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick(){\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h2>{this.state.date.toLocaleTimeString()}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;","import React from 'react'\r\nimport Clock from '../Clock'\r\n\r\nfunction Header() {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1>TodoList</h1>\r\n        <Clock />\r\n      </header>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { Component } from 'react'\r\n\r\nexport class AddTodo extends Component {\r\n  state = {\r\n    title: ''\r\n  }\r\n\r\n  onChange = (e) => this.setState({\r\n    title : e.target.value\r\n  });\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.addTodo(this.state.title);\r\n    this.setState({ title: ''});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{display: 'flex'}}>\r\n        <input \r\n          type=\"text\"\r\n          name=\"title\"\r\n          placeholder=\"Add Todo ...\"\r\n          style={{flex: '10', padding: '5px'}}\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n          />\r\n        <input type=\"submit\" value=\"Submit\" className=\"btn\" style={{flex: '1'}}/>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTodo\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport class TodoItem extends Component {\r\n  getStyle = () => {\r\n    return {\r\n      backgroundColor: \"4f4f4f4\",\r\n      padding: '10px',\r\n      borderBottom: '1px #ccc dotted',\r\n      textDecoration: this.props.todo.completed ?  \"line-through\" : \"none\"\r\n    }\r\n  };\r\n\r\n  markComplete = (e) => {\r\n    console.log(this.props)\r\n  }\r\n\r\n  render() {\r\n    const { id, title } = this.props.todo;\r\n    return (\r\n      <div style={this.getStyle()}>\r\n        <p>\r\n          <input \r\n            type=\"checkbox\" \r\n            onChange={this.props.markComplete.bind(this, id)}\r\n\r\n          /> \r\n          {' '}\r\n          {title}\r\n          <button onClick={this.props.delTodo.bind(this, id)} style={btnStyle}>x</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nTodoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n};\r\n\r\nconst btnStyle = {\r\n  backgroundColor: '#ff0000',\r\n  color: '#fff',\r\n  border: 'none',\r\n  padding: '5px 10px',\r\n  borderRadius: '50%',\r\n  cursor: 'pointer',\r\n  float: 'right'\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from \"react\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n  render() {\r\n    return this.props.todos.map((todo) => (\r\n      <TodoItem key={todo.id} todo={todo} markComplete={this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\nTodos.propTypes = {\r\n  todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from \"react\";\r\nimport Header from \"./Components/layout/Header\"\r\nimport AddTodo from \"./Components/AddTodo\"\r\nimport Todos from \"./Components/Todos\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Program\",\r\n        completed: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Practice Guitar and Piano\",\r\n        completed: false,\r\n      },\r\n      {\r\n        id: uuidv4(),\r\n        title: \"Workout\",\r\n        completed: false,\r\n      },\r\n    ],\r\n  };\r\n\r\n  markComplete = (id) => {\r\n    this.setState({\r\n      todos: this.state.todos.map((todo) => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      }),\r\n    });\r\n  };\r\n\r\n  delTodo = (id) => {\r\n    this.setState({\r\n      todos: [...this.state.todos.filter(todo => todo.id !== id)]\r\n    });\r\n  }\r\n\r\n  addTodo = (title) => {\r\n    const newTodo = {\r\n      id: uuidv4(),\r\n      title,\r\n      completed: false\r\n    }\r\n    this.setState({ todos: [...this.state.todos, newTodo] })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='container'>\r\n          <Header />\r\n          <AddTodo addTodo={this.addTodo}/>\r\n          <Todos todos={this.state.todos} markComplete={this.markComplete} delTodo={this.delTodo}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}